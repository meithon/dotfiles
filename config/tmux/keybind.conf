# vim: set ft=tmux


bind r source-file ~/.tmux.conf \; display "Reloaded!"
# bind-key r rotate-window
bind-key R rotate-window -D
bind v split-window -h
bind s split-window -v
bind o select-pane -t :.+
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -n C-M-z resize-pane -Z
unbind C-z
bind a setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"
bind Tab run-shell '
  current_window=$(tmux display-message -p "#{window_id}")
  last_window=$(tmux display-message -p "#{session_last_attached}")
  
  if [ "$(tmux display-message -p "#{window_zoomed_flag}")" = "1" ]; then
    tmux last-pane
    tmux resize-pane -Z
  else
    if tmux last-pane 2>/dev/null; then
      :
    else
      tmux last-window
    fi
  fi
'


# Create or switch to session from zoxide path selection
bind -n C-M-g display-popup -E -h 60% -w 60% 'selected_path=$(zoxide query -i); if [ -n "$selected_path" ]; then session_name=$(basename "$selected_path"); if tmux has-session -t "$session_name" 2>/dev/null; then tmux switch-client -t "$session_name"; else tmux new-session -d -s "$session_name" -c "$selected_path"; tmux switch-client -t "$session_name"; fi; fi'


# bind ] run-shell "filepath=/tmp/tmux-buffer/$(date +'%Y-%m-%d_%H-%M-%S'); mkdir -p $(dirname \$filepath) && tmux capture-pane -pS - > \$filepath && tmux display-message \"Pane captured to \$filepath\""


# ------------------------------------------------------------------------------------------
#  window management
# ------------------------------------------------------------------------------------------

# bind -n C-M-c new-window

bind -n C-M-n next-window
bind -n C-M-p previous-window

bind -n C-M-r rotate-window 

bind -n C-M-v split-window -h
bind -n C-M-s split-window -v

bind -n C-M-f resize-pane -Z
bind -n C-M-a resize-pane -Z
bind -n C-M-"'" switch-client -n
bind -n C-M-";" switch-client -p

# ------------------------------------------------------------------------------------------
#  pane management
# ------------------------------------------------------------------------------------------

bind -n C-M-x kill-pane

bind -n C-M-h select-pane -L
bind -n C-M-j select-pane -D
bind -n C-M-k select-pane -U
bind -n C-M-l select-pane -R

# move pane to the far right/left/bottom/top
bind H splitw -fhb \; swapp -t ! \; killp -t !
#              │││    ├────────┘    ├───────┘
#              │││    │             └ kill the previous pane
#              │││    └ exchange the previous original pane with the current one
#              ││└ the new pane should be created to the left of or above target-pane
#              │└ full window height
#              └ creates a new pane spanning the full window height (with -h)
#                or full window width (with -v), instead of splitting the active pane
bind L splitw -fh  \; swapp -t ! \; killp -t !
bind J splitw -fv  \; swapp -t ! \; killp -t !
bind K splitw -fvb \; swapp -t ! \; killp -t !


bind -n C-M-y resize-pane -L 18
bind -n C-M-u resize-pane -D 12
bind -n C-M-i resize-pane -U 12
bind -n C-M-o resize-pane -R 18
bind -n C-M-m resize-pane -Z
# ペインをリサイズする
# bind -r y resize-pane -L 19
# bind -r u resize-pane -D 1j
# bind -r i resize-pane -U 13
# bind -r o resize-pane -R 18


# prefix + Shift + P で前（左）に移動
bind-key -r 'P' swap-window -t -1\; select-window -t -1

# prefix + Shift + N で次（右）に移動
bind-key -r 'N' swap-window -t +1\; select-window -t +1

bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle;
bind-key -T copy-mode-vi v send-keys -X begin-selection;
bind-key -T copy-mode-vi V send-keys -X select-line;

# ------------------------------------------------------------------------------------------
#  session management with zoxide
# ------------------------------------------------------------------------------------------

